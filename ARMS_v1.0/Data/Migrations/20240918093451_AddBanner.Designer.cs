// <auto-generated />
using System;
using Data.ArmsContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ArmsDbContext))]
    [Migration("20240918093451_AddBanner")]
    partial class AddBanner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("SPId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAccountActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            AccessFailedCount = 0,
                            CampusId = "Hanoi",
                            ConcurrencyStamp = "1f559d46-f86b-485f-b9ad-c44f637a5a3c",
                            Email = "AdminHaNoi@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Admin Hanoi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINHANOI@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEO0C2YNastofu/qxW+aMbCRYZUUCvBm2zuHar7uGGso5jVepcfafg16/r72zKBtISw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5df0edf-f613-46aa-832e-e49c4b2f30f2",
                            TwoFactorEnabled = false,
                            UserName = "Administrator",
                            isAccountActive = false
                        });
                });

            modelBuilder.Entity("Data.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerId"), 1L, 1);

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerId");

                    b.HasIndex("CampusId");

                    b.ToTable("Banner", (string)null);

                    b.HasData(
                        new
                        {
                            BannerId = 1,
                            CampusId = "Hanoi",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner1.jpg?alt=media&token=3b681990-e08c-4e87-a69b-d1586a72398d"
                        },
                        new
                        {
                            BannerId = 2,
                            CampusId = "Hanoi",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner2.jpg?alt=media&token=fcd81d71-4b88-4443-a07d-3e21d2ad19bc"
                        },
                        new
                        {
                            BannerId = 3,
                            CampusId = "Hanoi",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner3.jpg?alt=media&token=829186db-6511-49ff-a4b7-48211a4d83db"
                        },
                        new
                        {
                            BannerId = 4,
                            CampusId = "Danang",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner1.jpg?alt=media&token=3b681990-e08c-4e87-a69b-d1586a72398d"
                        },
                        new
                        {
                            BannerId = 5,
                            CampusId = "Danang",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner2.jpg?alt=media&token=fcd81d71-4b88-4443-a07d-3e21d2ad19bc"
                        },
                        new
                        {
                            BannerId = 6,
                            CampusId = "Danang",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner3.jpg?alt=media&token=829186db-6511-49ff-a4b7-48211a4d83db"
                        },
                        new
                        {
                            BannerId = 7,
                            CampusId = "HCM",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner1.jpg?alt=media&token=3b681990-e08c-4e87-a69b-d1586a72398d"
                        },
                        new
                        {
                            BannerId = 8,
                            CampusId = "HCM",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner2.jpg?alt=media&token=fcd81d71-4b88-4443-a07d-3e21d2ad19bc"
                        },
                        new
                        {
                            BannerId = 9,
                            CampusId = "HCM",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner3.jpg?alt=media&token=829186db-6511-49ff-a4b7-48211a4d83db"
                        },
                        new
                        {
                            BannerId = 10,
                            CampusId = "Cantho",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner1.jpg?alt=media&token=3b681990-e08c-4e87-a69b-d1586a72398d"
                        },
                        new
                        {
                            BannerId = 11,
                            CampusId = "Cantho",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner2.jpg?alt=media&token=fcd81d71-4b88-4443-a07d-3e21d2ad19bc"
                        },
                        new
                        {
                            BannerId = 12,
                            CampusId = "Cantho",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner3.jpg?alt=media&token=829186db-6511-49ff-a4b7-48211a4d83db"
                        },
                        new
                        {
                            BannerId = 13,
                            CampusId = "Thanhhoa",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner1.jpg?alt=media&token=3b681990-e08c-4e87-a69b-d1586a72398d"
                        },
                        new
                        {
                            BannerId = 14,
                            CampusId = "Thanhhoa",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner2.jpg?alt=media&token=fcd81d71-4b88-4443-a07d-3e21d2ad19bc"
                        },
                        new
                        {
                            BannerId = 15,
                            CampusId = "Thanhhoa",
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Banner%2FBanner3.jpg?alt=media&token=829186db-6511-49ff-a4b7-48211a4d83db"
                        });
                });

            modelBuilder.Entity("Data.Models.Campus", b =>
                {
                    b.Property<string>("CampusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId");

                    b.ToTable("Campus", (string)null);

                    b.HasData(
                        new
                        {
                            CampusId = "Hanoi",
                            Address = "Cổng số 1, Tòa nhà FPT Polytechnic, 13 phố Trịnh Văn Bô, phường Phương Canh, quận Nam Từ Liêm, TP Hà NộiKm12 Cầu Diễn, Phường Phúc Diễn, Quận Bắc Từ Liêm, Hà Nội",
                            CampusName = "Hà Nội",
                            PhoneNumber = "02485820808"
                        },
                        new
                        {
                            CampusId = "Danang",
                            Address = "219 Nguyễn Sinh Sắc, phường Hoà Minh, quận Liên Chiểu, TP Đà Nẵng",
                            CampusName = "Đà Nẵng",
                            PhoneNumber = "02363710999"
                        },
                        new
                        {
                            CampusId = "Cantho",
                            Address = "Toà nhà FPT Polytechnic, đường số 22, phường Thường Thạnh,quận Cái Răng, TP Cần Thơ",
                            CampusName = "Cần Thơ",
                            PhoneNumber = "0983881100"
                        },
                        new
                        {
                            CampusId = "HCM",
                            Address = "Tòa nhà QTSC9 (toà T), đường Tô Ký, phường Tân Chánh Hiệp, quận 12, TP HCM.778/B1 Nguyễn Kiệm, phường 04, quận Phú Nhuận, TP HCM",
                            CampusName = "Tp HCM",
                            PhoneNumber = "02866866486"
                        },
                        new
                        {
                            CampusId = "Thanhhoa",
                            Address = "Tòa Beta, Tổ hợp giáo dục FPT, Đại lộ Võ Nguyên Giáp, phường Quảng Thành, TP Thanh Hóa",
                            CampusName = "Thanh Hoá",
                            PhoneNumber = "0913785213"
                        });
                });

            modelBuilder.Entity("Data.Models.Major", b =>
                {
                    b.Property<string>("MajorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MajorID");

                    b.HasIndex("CampusId");

                    b.ToTable("Major", (string)null);

                    b.HasData(
                        new
                        {
                            MajorID = "E",
                            CampusId = "Hanoi",
                            MajorName = "Công nghệ thông tin"
                        },
                        new
                        {
                            MajorID = "A",
                            CampusId = "Hanoi",
                            MajorName = "Ngôn ngữ"
                        },
                        new
                        {
                            MajorID = "S",
                            CampusId = "Hanoi",
                            MajorName = "Quản trị kinh doanh"
                        },
                        new
                        {
                            MajorID = "B",
                            CampusId = "Hanoi",
                            MajorName = "Làm đẹp"
                        },
                        new
                        {
                            MajorID = "O",
                            CampusId = "Hanoi",
                            MajorName = "Ngành khác"
                        });
                });

            modelBuilder.Entity("Data.Models.SpecializeMajor", b =>
                {
                    b.Property<string>("SpecializeMajorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MajorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecializeMajorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecializeMajorID");

                    b.HasIndex("MajorID");

                    b.ToTable("SpecializeMajor", (string)null);

                    b.HasData(
                        new
                        {
                            SpecializeMajorID = "ME",
                            MajorID = "E",
                            SpecializeMajorName = "Lập trình mobile"
                        },
                        new
                        {
                            SpecializeMajorID = "GE",
                            MajorID = "E",
                            SpecializeMajorName = "Lập trình game"
                        },
                        new
                        {
                            SpecializeMajorID = "WE",
                            MajorID = "E",
                            SpecializeMajorName = "Lập trình web"
                        },
                        new
                        {
                            SpecializeMajorID = "TE",
                            MajorID = "E",
                            SpecializeMajorName = "Kiểm thử"
                        },
                        new
                        {
                            SpecializeMajorID = "EA",
                            MajorID = "A",
                            SpecializeMajorName = "Ngôn ngữ anh"
                        },
                        new
                        {
                            SpecializeMajorID = "JA",
                            MajorID = "A",
                            SpecializeMajorName = "Ngôn ngữ nhật"
                        },
                        new
                        {
                            SpecializeMajorID = "KA",
                            MajorID = "A",
                            SpecializeMajorName = "Ngôn ngữ hàn"
                        },
                        new
                        {
                            SpecializeMajorID = "SM",
                            MajorID = "S",
                            SpecializeMajorName = "Marketing"
                        },
                        new
                        {
                            SpecializeMajorID = "HM",
                            MajorID = "S",
                            SpecializeMajorName = "Quản trị khách sạn"
                        },
                        new
                        {
                            SpecializeMajorID = "RM",
                            MajorID = "S",
                            SpecializeMajorName = "Quản trị nhà hàng"
                        },
                        new
                        {
                            SpecializeMajorID = "BT",
                            MajorID = "B",
                            SpecializeMajorName = "Phum xăm thẩm mỹ"
                        },
                        new
                        {
                            SpecializeMajorID = "BS",
                            MajorID = "B",
                            SpecializeMajorName = "Chăm sóc da và massage"
                        },
                        new
                        {
                            SpecializeMajorID = "AO",
                            MajorID = "O",
                            SpecializeMajorName = "Kiểm toán"
                        },
                        new
                        {
                            SpecializeMajorID = "SO",
                            MajorID = "O",
                            SpecializeMajorName = "Thư ký văn phòng"
                        },
                        new
                        {
                            SpecializeMajorID = "FO",
                            MajorID = "O",
                            SpecializeMajorName = "Kỹ thuật chế biến món ăn"
                        });
                });

            modelBuilder.Entity("Data.Models.StudentConsultation", b =>
                {
                    b.Property<int>("SCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SCId"), 1L, 1);

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateReceive")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkFB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecializeMajorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SCId");

                    b.HasIndex("CampusId");

                    b.HasIndex("SpecializeMajorID");

                    b.HasIndex("UserID");

                    b.ToTable("StudentConsultation", (string)null);

                    b.HasData(
                        new
                        {
                            SCId = 1,
                            CampusId = "Hanoi",
                            DateReceive = new DateTime(2024, 9, 18, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenducanh01.57@gmail.com",
                            FullName = "Nguyen Đức Anh",
                            LinkFB = "https://www.facebook.com/profile.php?id=61551770462937",
                            PhoneNumber = "0123456789",
                            SpecializeMajorID = "ME",
                            Status = false
                        },
                        new
                        {
                            SCId = 2,
                            CampusId = "Hanoi",
                            DateReceive = new DateTime(2024, 9, 18, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenducanh01.57@gmail.com",
                            FullName = "Nguyen Đức Anh",
                            LinkFB = "https://www.facebook.com/profile.php?id=61551770462937",
                            PhoneNumber = "0123456789",
                            SpecializeMajorID = "ME",
                            Status = false
                        });
                });

            modelBuilder.Entity("Data.Models.StudentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressRecipientResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CIDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CitizenIentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diploma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiplomaType")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailStudent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullnameParents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImgCitizenIdentification1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgCitizenIdentification2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PermanentAddress")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneParents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneStudent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RecipientResults")
                        .HasColumnType("bit");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializeMajor1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializeMajor2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearOfGraduation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("CampusId");

                    b.ToTable("StudentProfile", (string)null);
                });

            modelBuilder.Entity("Data.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FFptSoftware.png?alt=media&token=552c0a51-fdea-4795-acd7-fd10fe5cb45f",
                            SupplierName = "Fpt Software"
                        },
                        new
                        {
                            SupplierId = 2,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FVNPT.png?alt=media&token=96d1f135-015a-4c8c-a8a3-dbd283cbd345",
                            SupplierName = "Tập đoàn bưu chính viễn thông"
                        },
                        new
                        {
                            SupplierId = 3,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FBase.vn.png?alt=media&token=be9f0ae0-8704-4cf5-b20c-d344d7d9ea3c",
                            SupplierName = "Base.vn"
                        },
                        new
                        {
                            SupplierId = 4,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FUniMedia.png?alt=media&token=8b223dea-5076-485c-95c8-467c39568c88",
                            SupplierName = "UniMedia"
                        },
                        new
                        {
                            SupplierId = 5,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FAvepoint.png?alt=media&token=ebbbdabb-d411-4a6b-a57b-a16b1c144a8c",
                            SupplierName = "Avepoint Việt Nam"
                        },
                        new
                        {
                            SupplierId = 6,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FCMC.jpg?alt=media&token=e37589d5-9907-44fd-abac-a1ace3537f27",
                            SupplierName = "CMC"
                        },
                        new
                        {
                            SupplierId = 7,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FKaopiz.png?alt=media&token=b9d29e81-712e-4b78-b8c3-2d74144347f3",
                            SupplierName = "Kaopiz"
                        },
                        new
                        {
                            SupplierId = 8,
                            Img = "https://firebasestorage.googleapis.com/v0/b/arms-acdfc.appspot.com/o/Supplier%2FViettel.png?alt=media&token=3493a983-26d0-4c41-967e-341c3cfcc269",
                            SupplierName = "Viettel"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            ConcurrencyStamp = "1429b19f-d98d-4254-862e-de557196d140",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86"),
                            ConcurrencyStamp = "700db8a3-afa8-47b0-bc92-69fdb5cc8ffa",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.HasOne("Data.Models.Campus", "Campus")
                        .WithMany("Accounts")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Data.Models.Banner", b =>
                {
                    b.HasOne("Data.Models.Campus", "Campus")
                        .WithMany("Banners")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Data.Models.Major", b =>
                {
                    b.HasOne("Data.Models.Campus", "Campus")
                        .WithMany("Majors")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Data.Models.SpecializeMajor", b =>
                {
                    b.HasOne("Data.Models.Major", "Major")
                        .WithMany("SpecializeMajors")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("Data.Models.StudentConsultation", b =>
                {
                    b.HasOne("Data.Models.Campus", "Campus")
                        .WithMany("StudentConsultations")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Models.SpecializeMajor", "SpecializeMajor")
                        .WithMany("StudentConsultations")
                        .HasForeignKey("SpecializeMajorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Models.Account", "Account")
                        .WithMany("StudentConsultations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Campus");

                    b.Navigation("SpecializeMajor");
                });

            modelBuilder.Entity("Data.Models.StudentProfile", b =>
                {
                    b.HasOne("Data.Models.Account", "Account")
                        .WithOne("StudentProfile")
                        .HasForeignKey("Data.Models.StudentProfile", "AccountId");

                    b.HasOne("Data.Models.Campus", "Campus")
                        .WithMany("StudentProfiles")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.Navigation("StudentConsultations");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("Data.Models.Campus", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Banners");

                    b.Navigation("Majors");

                    b.Navigation("StudentConsultations");

                    b.Navigation("StudentProfiles");
                });

            modelBuilder.Entity("Data.Models.Major", b =>
                {
                    b.Navigation("SpecializeMajors");
                });

            modelBuilder.Entity("Data.Models.SpecializeMajor", b =>
                {
                    b.Navigation("StudentConsultations");
                });
#pragma warning restore 612, 618
        }
    }
}
